# Generated by Django 2.1.8 on 2019-05-22 17:15

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userID', models.AutoField(primary_key=True, serialize=False, verbose_name='用户ID')),
                ('name', models.CharField(max_length=30, verbose_name='用户名')),
                ('phone', models.CharField(default='', max_length=11, unique=True, verbose_name='电话')),
                ('isExpert', models.BooleanField(default=False, verbose_name='是否专家')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('user_add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '普通用户',
                'verbose_name_plural': '普通用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '用户关注',
                'verbose_name_plural': '用户关注',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('messageID', models.AutoField(primary_key=True, serialize=False, verbose_name='消息ID')),
                ('content', models.TextField(verbose_name='内容')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='发送时间')),
            ],
            options={
                'verbose_name': '站内信',
                'verbose_name_plural': '站内信',
            },
        ),
        migrations.CreateModel(
            name='ExpertProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='expert', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='专家ID')),
                ('intro', models.TextField(blank=True, null=True, verbose_name='自我介绍')),
                ('constitution', models.CharField(blank=True, max_length=255, null=True, verbose_name='所在机构')),
                ('realName', models.CharField(max_length=255, verbose_name='真实姓名')),
                ('expert_add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '科技专家',
                'verbose_name_plural': '科技专家',
            },
        ),
        migrations.AddField(
            model_name='message',
            name='receiverID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receivemsg', to=settings.AUTH_USER_MODEL, verbose_name='接受者ID'),
        ),
        migrations.AddField(
            model_name='message',
            name='senderID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sendmsg', to=settings.AUTH_USER_MODEL, verbose_name='发送者ID'),
        ),
        migrations.AddField(
            model_name='follow',
            name='userID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow', to=settings.AUTH_USER_MODEL, verbose_name='关注者'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='follow',
            name='followID',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='followed', to='users.ExpertProfile', verbose_name='被关注者'),
        ),
    ]
